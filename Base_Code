import sys, pygame
from pygame import *
from pygame.sprite import *
from pygame.mixer import *


import random
import math


pygame.init()
mixer.init()

#create colors
white = (255,255,255)
black = (0,0,0)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)
purple = (230,0, 240)
yellow = (255, 255, 0)
gray = (70,70,70)

#position vars
x_pos = 0
y_pos = 0

#create a surface
gameDisplay = pygame.display.set_mode((1000,600)) #initialize with a tuple




# def redraw():
# 	gameDisplay.fill(black)
# 	pygame.draw.circle(gameDisplay, yellow, (500,400), 50, 0)
# 	pygame.draw.circle(gameDisplay, red, (50,100), 20, 0)
# 	pygame.draw.lines(gameDisplay, white, True, [(600,600), (620,640), (640,600), (620,560)], 5)
# 	pygame.draw.rect(gameDisplay, purple, [600,75,35,35], 0)
	
class YellowCircle(pygame.sprite.Sprite):
	def __init__(self):
		pygame.sprite.Sprite.__init__(self)
		self.image = pygame.Surface((50, 50))
		self.image.fill((255, 255, 255))
		self.rect = self.image.get_rect().move(500,400)
		pygame.draw.circle(self.image, yellow, (20,20), 10, 0)

	def update(self):
		self.image = pygame.Surface((80, 80))
		
		self.image.fill((0, 0, 0))
		pygame.draw.circle(self.image, yellow, (40,40), 40, 0)
		self.rect = self.image.get_rect().move(500,300)

			


class OrbitingObjects(pygame.sprite.Sprite):
	def __init__(self, color, width, height):
		super().__init__()
		self.image = pygame.Surface((width,height))
		self.image.fill(color)
		self.rect=self.image.get_rect()

		self.center_x = 500
		self.center_y= 400

		self.angle = 0 #current angle (radians)
		self.radius = 0 #radius of orbit motion
		self.speed = .1 #radians per frame

	def update(self):
		self.rect.x = self.radius * math.sin(self.angle) + self.center_x
		self.rect.y = self.radius * math.cos(self.angle) + self.center_y

		self.angle += self.speed


class Satellite (pygame.sprite.Sprite):
	def __init__ (self, location_x, location_y):
		super().__init__()
		self.image = image.load("Satelite-2-512.bmp").convert()
		self.rect = self.image.get_rect().move(location_x, location_y)
		self.speed = .5
	
	def update (self):
		self.rect.y -= self.speed
		if self.rect.y ==0:
			self.rect.y = 600


class Resource(pygame.sprite.Sprite):
	def __init__(self):
		super().__init__()
		self.image = image.load("plasma.bmp").convert_alpha()
		self.rect = self.image.get_rect().move((random.randint(0,1000), (random.randint(0,600))))




class Player(pygame.sprite.Sprite):
	def __init__(self,color,width,height):

		super().__init__()
		self.image = pygame.Surface([width,height])
		self.image.fill(color)
		self.rect = self.image.get_rect()

	def update(self):
		pos = pygame.mouse.get_pos()
		self.rect.x = pos[0]
		self.rect.y = pos[1]

def checkCollision(sprite1, sprite2):
	col = pygame.sprite.spritecollide(sprite1, sprite2, True)
	if col!=[]:
		font = pygame.font.Font(None, 100)
		text=font.render("GAME OVER", 1,(242,8,250))
		gameDisplay.blit(text, (400, 300))
		pygame.display.update()
		# all_sprites_list.add(game_over)
		print ("You have collected", resources_collected, "resources. Great job!")
		pygame.time.delay(4000)
		sys.exit()


harmful_object_list = pygame.sprite.Group()

all_sprites_list = pygame.sprite.Group()

sun=YellowCircle()
harmful_object_list.add(sun)
all_sprites_list.add(sun)

for i in range(4):
	orbiter = OrbitingObjects(red, 34,40)
	orbiter.center_x = 500
	orbiter.center_y = 400
	orbiter.radius = random.randrange(50,300)
	orbiter.angle = random.random() * 2 * math.pi
	orbiter.speed = random.randrange(0,100)/1000

	harmful_object_list.add(orbiter)
	all_sprites_list.add(orbiter)

player = Player(purple, 20, 20)
satellite1 = Satellite(900,100)
Satellite2 = Satellite (100, 700)
plasma = Resource()


all_sprites_list.add(player)
all_sprites_list.add(satellite1)
all_sprites_list.add(Satellite2)
all_sprites_list.add(plasma)

harmful_object_list.add(Satellite2)
harmful_object_list.add(satellite1)

print(all_sprites_list)
        

pygame.display.update()#only updates portion specified
clock = pygame.time.Clock()

resources_collected = 0

success_sound = Sound("cha-ching.WAV")

### Main Loop
gameExit = False
while not gameExit:
	

	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			gameExit = True

		if player.rect.colliderect(plasma.rect):
			#the player collided with the resource
			resources_collected += 1
			all_sprites_list.remove(plasma)
			plasma = Resource()
			Sound.play(success_sound, loops=0)
			all_sprites_list.add(plasma)
			print (resources_collected)


	all_sprites_list.update()
	checkCollision(player, harmful_object_list)
	gameDisplay.fill(black)

	all_sprites_list.draw(gameDisplay)


	font = pygame.font.Font(None,36)
	text=font.render("Resources Collected= "+ str(resources_collected), 1, (255,255,255))
	gameDisplay.blit(text, (50, 550))
		

	pygame.display.flip()
	pygame.display.update()
	clock.tick(50)




